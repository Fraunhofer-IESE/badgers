import abc
from typing import Tuple

import numpy as np
from numpy.random import default_rng

from badgers.core.base import GeneratorMixin
from badgers.core.decorators.time_series import preprocess_inputs
from badgers.core.utils import random_sign


class OutliersGenerator(GeneratorMixin):
    """
    Base class for transformers that generate point outliers in time-series data
    """

    def __init__(self, random_generator=default_rng(seed=0)):
        """
        Initialize the OutliersGenerator with a specified random number generator.

        :param random_generator: An instance of a random number generator from NumPy's random module.
                                 Default is a default_rng seeded with 0.
        """
        self.random_generator = random_generator
        self.outliers_indices_ = []

    @abc.abstractmethod
    def generate(self, X, y, **params) -> Tuple:
        """
        Generate point outliers in the given time-series data.

        This method should be overridden by subclasses to implement specific outlier generation strategies.

        :param X: Input features (time-series data).
        :param y: Target values (optional, may be None).
        :param params: Additional parameters that may be required for outlier generation.
        :return: A tuple containing the modified data with outliers and any additional information.
        """
        pass


class RandomZerosGenerator(OutliersGenerator):
    """
    Randomly set data points to 0
    """

    def __init__(self, random_generator=default_rng(seed=0)):
        """
        Initialize the RandomZerosGenerator with a specified random number generator.

        :param random_generator: An instance of a random number generator from NumPy's random module.
                                 Default is a default_rng seeded with 0.
        """
        super().__init__(random_generator=random_generator)

    @preprocess_inputs
    def generate(self, X, y, n_outliers: int = 10) -> Tuple:
        """
        Randomly set a specified number of values in the input data to zero.

        :param X: The input features (time-series data), expected to be a 2D numpy array.
        :param y: The target values, optional and can be None.
        :param n_outliers: The number of outliers to generate by setting to zero.
                           Defaults to 10.
        :return: A tuple containing the modified data with outliers and the indices of the generated outliers.
        """
        # generate extreme values indices and values
        rows = self.random_generator.choice(X.shape[0], size=n_outliers, replace=False, p=None)
        cols = self.random_generator.integers(low=0, high=X.shape[1], size=n_outliers)

        self.outliers_indices_ = list(zip(rows, cols))

        for r, c in self.outliers_indices_:
            X.iloc[r, c] = 0

        return X, y


class LocalZScoreGenerator(OutliersGenerator):
    """
    Randomly generates locally extreme values.
    Given a time interval (a window) of size l, an outlier is generated by setting the value a time t
    """

    def __init__(self, random_generator=default_rng(seed=0)):
        """
        Initialize the LocalZScoreGenerator with a specified random number generator.

        :param random_generator: An instance of a random number generator from NumPy's random module.
                                 Default is a default_rng seeded with 0.
        """
        super().__init__(random_generator=random_generator)

    @preprocess_inputs
    def generate(self, X, y, n_outliers: int = 10,
                 local_window_size: int = 10):
        """
        Generates outliers based on local Z-scores.

        For each outlier, a local window of size `local_window_size` is selected, and the local mean and standard deviation are computed.
        An outlier is then generated by setting the value at a randomly chosen index within this window to a value outside the range
        [local_mean - 3 * local_std, local_mean + 3 * local_std]. The sign of the outlier value is the same as the sign of the original value.

        :param X: The input features (time-series data), expected to be a 2D numpy array.
        :param y: The target values, optional and can be None.
        :param n_outliers: The number of outliers to generate. Defaults to 10.
        :param local_window_size: The width (number of data points) of the local window used to compute the local Z-score. Defaults to 10.
        :return: A tuple containing the modified data with outliers and the indices of the generated outliers.
        """
        # generate extreme values indices and values
        delta = int(local_window_size / 2)

        rows = self.random_generator.choice(
            np.arange(delta, X.shape[0] - delta, dtype=int), size=n_outliers, replace=False, p=None)
        cols = self.random_generator.integers(low=0, high=X.shape[1], size=n_outliers)

        self.outliers_indices_ = list(zip(rows, cols))

        for r, c in self.outliers_indices_:
            local_window = X.iloc[r - delta:r + delta, c]
            local_mean = local_window.mean(axis=0)
            local_std = local_window.std(axis=0)
            value = local_mean + random_sign(self.random_generator) * (
                3. * local_std + self.random_generator.exponential())
            # updating with new outliers
            X.iloc[r, c] = value

        return X, y
